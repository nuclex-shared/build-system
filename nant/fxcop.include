<?xml version="1.0" encoding="utf-8" ?>

<project
  xmlns="http://nant.sf.net/schemas/nant-0.85.win32.net-1.0.xsd"
  name="FxCop"
>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

  <!--
      Locates FxCop and initializes the fxcop.path property
  -->
  <target name="locate-fxcop" unless="${property::exists('fxcop.path')}">

    <!--
      Try to locate FxCop in its default path on x86 systems
    -->
    <if test="${not property::exists('fxcop.path')}">
      <if test="${environment::variable-exists('ProgramFiles')}">
        <foreach
          item="Folder"
          in="${environment::get-variable('ProgramFiles')}"
          property="temp"
        >
          <if test="${string::starts-with(string::to-lower(path::get-file-name(temp)), 'microsoft fxcop')}">
            <property name="fxcop.path" value="${path::combine(temp, 'bin')}" />
          </if>
        </foreach>
        
        <if test="${property::exists('fxcop.path')}">
          <property name="fxcop.path" value="${path::get-full-path(fxcop.path)}" />
        </if>
      </if>
    </if>

    <!--
      Try to locate FxCop in its default path on x64 systems
    -->
    <if test="${not property::exists('fxcop.path')}">
      <if test="${environment::variable-exists('ProgramW6432')}">
        <foreach
          item="Folder"
          in="${environment::get-variable('ProgramW6432')}"
          property="temp"
        >
          <if test="${string::starts-with(string::to-lower(path::get-file-name(temp)), 'microsoft fxcop')}">
            <property name="fxcop.path" value="${path::combine(temp, 'bin')}" />
          </if>
        </foreach>

        <if test="${property::exists('fxcop.path')}">
          <property name="fxcop.path" value="${path::get-full-path(fxcop.path)}" />
        </if>
      </if>
    </if>
    
    <!--
      Display what we've found out
    -->
    <if test="${property::exists('fxcop.path')}">
      <echo message="FxCop located in ${fxcop.path}" />
    </if>
    <if test="${not property::exists('fxcop.path')}">
      <echo message="FxCop not found. Use -D:fxcop.path=... to set path" />
    </if>

  </target>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

  <target name="require-fxcop" depends="locate-fxcop">

    <!--
      TeamCity has its own FxCop version that allows you to select x86 or x64 mode,
      so we don't require FxCop to be installed separately there.
    -->
    <if test="${not property::exists('fxcop.path')}">
      <fail message="FxCop is required for this build" />
    </if>
    <property name="temp" value="${path::combine(fxcop.path, 'FxCopCmd.exe')}" />
    <if test="${not file::exists(temp)}">
      <fail message="FxCop is required for this build" />
    </if>

  </target>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

  <!--
    Runs unit tests in a single assembly

    Inputs:
      fxcop.assemblies  Comma separated assemblies that will be tested with FxCop
      fxcop.targetdir   
  -->
  <target name="fxcop" depends="require-fxcop">

    <property name="temp.targetpath" value="${path::combine(fxcop.targetdir, 'fxcop.xml')}" />
    <property name="temp" value="${path::combine(fxcop.targetdir, 'fxcop.xml')}" />
    <property
      name="temp.arguments" value="/out:&quot;${temp.targetpath}&quot;"
    />

    <property name="temp" value="${string::replace(fxcop.assemblies, ', ', ',')}" />
    <foreach item="String" in="${temp}" delim="," property="temp.assemblies">
      <property
        name="temp.arguments"
        value="${temp.arguments} /file:&quot;${temp.assemblies}&quot;"
      />
    </foreach>

    <if test="${not property::exists('fxcop.reportpath')}">
      <property name="fxcop.reportpath" value="" />
    </if>
    
    <echo message="===================================================================" />
    <echo message="Running FxCop (static code analysis)" />
    <echo message="===================================================================" />
    <exec
      program="${path::combine(fxcop.path, 'FxCopCmd.exe')}"
      failonerror="false"
      managed="true"
      commandline="${temp.arguments}"
    />

  </target>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

</project>

